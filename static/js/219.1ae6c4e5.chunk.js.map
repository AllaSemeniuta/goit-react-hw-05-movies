{"version":3,"file":"static/js/219.1ae6c4e5.chunk.js","mappings":"8LAcaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,wLCtBWC,EAAQX,EAAAA,GAAAA,IAAH,+HAEC,SAAAY,GAAC,OAAIA,EAAEC,MAAMC,MAAMC,MAAlB,IAGD,SAAAH,GAAC,OAAIA,EAAEC,MAAMX,MAAM,EAAlB,IAGPc,EAAOhB,EAAAA,GAAAA,EAAH,uFACE,SAAAY,GAAC,OAAIA,EAAEC,MAAMX,MAAM,EAAlB,IAGD,SAAAU,GAAC,OAAIA,EAAEC,MAAMI,YAAYC,IAAxB,I,SCiDpB,EAtDa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAyBE,EAAAA,EAAAA,UAAS,IAAlC,eAAOC,EAAP,KAAcC,EAAd,KAsBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAK,IAGYC,EAHb,mCAGF,WAAuBN,GAAvB,uFACyBO,EAAAA,GAAgBP,GADzC,OACQQ,EADR,OAGEJ,EAAQI,EAASC,KAAKC,MAHxB,2CAHE,sDACF,GAAgB,OAAZV,EAAkB,OAStBM,EAAQN,EAIT,CAFC,MAAOW,GAER,CACF,GAAE,CAACX,IAEU,KAAVG,GAGA,mDAKF,SAACvB,EAAA,EAAD,CAAKgC,GAAG,UAAUC,GAAI,EAAtB,UACE,wBACGV,EAAMW,KAAI,YAAwC,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAC1BC,EAAQH,EAAY,UA/Bf,mCA+Be,OACNA,GAChBI,EAEJ,OACE,2BACE,SAAC3B,EAAD,CAAO4B,IAAKF,EAAOG,IAAKL,KACxB,SAACnB,EAAD,UAAOmB,KACP,UAACnB,EAAD,YACE,yCADF,IAC2BoB,OAJpBD,EAQZ,OAIR,C,oNC3DDM,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAEMC,EAAM,CACVC,OAAQ,CACNC,QAJY,qCAQHC,EAAgB,mCAAG,oGACPJ,EAAAA,EAAAA,IAAU,uBAAwBC,GAD3B,cACxBf,EADwB,yBAGvBA,EAASC,MAHc,2CAAH,qDAMhBkB,EAAe,mCAAG,WAAMC,GAAN,uFACNN,EAAAA,EAAAA,IAAA,iBAAoBM,GAAYL,GAD1B,cACvBf,EADuB,yBAGtBA,GAHsB,2CAAH,sDAMfqB,EAAW,mCAAG,WAAMD,GAAN,uFACFN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,YAAwCL,GADtC,cACnBf,EADmB,yBAElBA,GAFkB,2CAAH,sDAKXsB,EAAc,mCAAG,WAAMF,GAAN,uFACLN,EAAAA,EAAAA,IAAA,iBAAoBM,EAApB,YAAwCL,GADnC,cACtBf,EADsB,yBAErBA,GAFqB,2CAAH,sDAKduB,EAAoB,mCAAG,WAAMC,GAAN,gFAC5BC,GAD4B,UACNV,IACbC,OAAOQ,MAAQA,EAFI,SAGXV,EAAAA,EAAAA,IAAA,gBAA2BW,GAHhB,cAG5BzB,EAH4B,yBAI3BA,GAJ2B,2CAAH,qD","sources":["components/Box/Box.js","components/Cast/Cast.styled.js","components/Cast/Cast.js","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  typography,\n  shadow,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n  typography,\n  shadow\n);\n","import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 200px;\n  border-radius: ${p => p.theme.radii.normal};\n  height: 200px;\n  object-fit: cover;\n  margin-bottom: ${p => p.theme.space[2]};\n`;\n\nexport const Text = styled.p`\n  margin-bottom: ${p => p.theme.space[2]};\n\n  span {\n    font-weight: ${p => p.theme.fontWeights.bold};\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/moviesApi';\nimport defaultCastAvatar from '../../images/defaultCastAvatar.png';\nimport { Box } from 'components/Box/Box';\nimport { Image, Text } from './Cast.styled';\n\n// import BeatLoader from 'react-spinners/BeatLoader';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCast] = useState('');\n  // const [isLoading, setIsLoading] = useState(false);\n  const posterPath = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    try {\n      if (movieId === null) return;\n\n      async function getCast(movieId) {\n        const response = await API.getCastByID(movieId);\n        // console.log('response.data.cast', response.data);\n        setCast(response.data.cast);\n      }\n      // console.log(isLoading);\n      // setIsLoading(true);\n      getCast(movieId);\n      // setIsLoading(false);\n    } catch (error) {\n      // setIsLoading(false);\n    }\n  }, [movieId]);\n\n  if (casts === '')\n    return (\n      // <>{isLoading && <BeatLoader color=\"#36d7b7\" />}</>\n      <div>No casts information</div>\n    );\n\n  return (\n    // {/* {isLoading && <BeatLoader color=\"#36d7b7\" />} */}\n    <Box as=\"section\" px={5}>\n      <ul>\n        {casts.map(({ profile_path, name, character }) => {\n          const image = profile_path\n            ? `${posterPath}${profile_path}`\n            : defaultCastAvatar;\n\n          return (\n            <li key={name}>\n              <Image src={image} alt={name} />\n              <Text>{name}</Text>\n              <Text>\n                <span>Character:</span> {character}\n              </Text>\n            </li>\n          );\n        })}\n      </ul>\n    </Box>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst API_KEY = 'ae73804bd189becf74915bbee0851e24';\n\nconst obj = {\n  params: {\n    api_key: API_KEY,\n  },\n};\n\nexport const trendMoviesFetch = async () => {\n  const response = await axios.get('/trending/movie/week', obj);\n  // console.log(response.data);\n  return response.data;\n};\n\nexport const getMovieDetails = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}`, obj);\n  // console.log(response);\n  return response;\n};\n\nexport const getCastByID = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}/credits`, obj);\n  return response;\n};\n\nexport const getReviewsByID = async movie_id => {\n  const response = await axios.get(`/movie/${movie_id}/reviews`, obj);\n  return response;\n};\n\nexport const getSearchQueryMovies = async query => {\n  const paramsForQuery = { ...obj };\n  paramsForQuery.params.query = query;\n  const response = await axios.get(`/search/movie`, paramsForQuery);\n  return response;\n};\n\nexport * from './moviesApi';\n"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","typography","shadow","Image","p","theme","radii","normal","Text","fontWeights","bold","movieId","useParams","useState","casts","setCast","useEffect","getCast","API","response","data","cast","error","as","px","map","profile_path","name","character","image","defaultCastAvatar","src","alt","axios","obj","params","api_key","trendMoviesFetch","getMovieDetails","movie_id","getCastByID","getReviewsByID","getSearchQueryMovies","query","paramsForQuery"],"sourceRoot":""}